"use client"

import { useForm } from "react-hook-form";
import { LoginProps } from "./props/LoginProps";
import { RegistrationProps } from "./props/RegistrationProps";
import { InputController } from "@/src/Molecules/InputController";
import { LoginFormData } from "./data/LoginForm.data";
import { RegistartionFormData } from "./data/RegistrationForm.data";
import { CustomButton } from "@/src/Atoms/CustomButton";
import { useAuth } from "@/src/shared/hook/useAuth/useAuth";
import { IAuthVariables } from "@/src/shared/type/auth/IAuthVariables";
import { CustomeErrorMessage } from "@/src/Atoms/CustomErrorMessage";
import { useAuthMutation } from "@/src/api/auth/useMutation";

export const AuthForm = <T extends "login" | "register">(
  { typePage }: AuthFormProps<T>
) => {
  const { handlerAuth, error } = useAuth()
  type PageProps = T extends "login" ? LoginProps : RegistrationProps;
  const authMutation = useAuthMutation()

  const { control, handleSubmit, formState: { errors } } = useForm<any>();
  const handleFormSubmit = async (body: PageProps) => {
    console.log(body)
    let data: IAuthVariables;
    if (typePage === "login") {
      data = {
        typePage: "login",
        body: body as LoginProps
      };
    } else {
      data = {
        typePage: "register",
        body: body as RegistrationProps
      };
    }
    await authMutation(data);

  };
  const inputData = typePage == "login" ? LoginFormData : RegistartionFormData

  return (
    <form
      onSubmit={
        handleSubmit(handleFormSubmit)
      }
    >
      <InputController control={control} errors={errors} inputData={inputData} />
      {error && <CustomeErrorMessage text={error?.message} />}
      <CustomButton text="Submit" type="submit" />
    </form >
  )
}
